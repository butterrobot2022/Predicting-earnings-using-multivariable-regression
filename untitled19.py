# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eQlSLJ7-rmvxgcspwmFqAsWw8bOwcjAi
"""

import numpy as np
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns

# This might be helpful:
from collections import Counter

pd.options.display.float_format = '{:,.2f}'.format

df_hh_income = pd.read_csv('Median_Household_Income_2015.csv', encoding="windows-1252")
df_pct_poverty = pd.read_csv('Pct_People_Below_Poverty_Level.csv', encoding="windows-1252")
df_pct_completed_hs = pd.read_csv('Pct_Over_25_Completed_High_School.csv', encoding="windows-1252")
df_share_race_city = pd.read_csv('Share_of_Race_By_City.csv', encoding="windows-1252")
df_fatalities = pd.read_csv('Deaths_by_Police_US.csv', encoding="windows-1252")

df_hh_income.shape

df_pct_poverty.shape

df_pct_completed_hs.shape

df_share_race_city.shape

df_fatalities.shape

df_hh_income.columns

df_pct_poverty.columns

df_pct_completed_hs.columns

df_share_race_city.columns

df_fatalities.columns

df_hh_income = df_hh_income.fillna(0)

df_pct_poverty.isna().values.any()

df_pct_completed_hs.isna().values.any()

df_share_race_city.isna().values.any()

df_fatalities = df_fatalities.fillna(0)

df_hh_income.duplicated().values.any()

df_pct_completed_hs.duplicated().values.any()

df_pct_poverty.duplicated().values.any()

df_share_race_city.duplicated().values.any()

df_fatalities.duplicated().values.any()

df_pct_poverty.poverty_rate = df_pct_poverty.poverty_rate.str.replace("-", "")

df_pct_poverty.poverty_rate = pd.to_numeric(df_pct_poverty.poverty_rate)

bar = px.bar(df_pct_poverty,
             x='Geographic Area',
             y='poverty_rate', 
             color='poverty_rate')
bar.show()

df_pct_completed_hs.percent_completed_hs = pd.to_numeric(df_pct_completed_hs.percent_completed_hs.str.replace("-", ""))

df_pct_completed_hs.sort_values(by="percent_completed_hs", ascending=True)

df_pct_completed_hs = df_pct_completed_hs.fillna(0)
df_pct_poverty = df_pct_poverty.fillna(0)

bar = px.bar(
    df_pct_completed_hs,
    x='Geographic Area',
    y='percent_completed_hs'
)
bar.show()

plt.figure(figsize=(14, 8), dpi=200)
fig, ax1 = plt.subplots()
ax1.bar(df_pct_poverty.index, df_pct_poverty['poverty_rate'], color='red')
ax1.set_ylabel("poverty_rate")
ax1.set_xlabel("US States")

ax2 = ax1.twinx()
ax2.bar(df_pct_completed_hs.index, df_pct_completed_hs['percent_completed_hs'])
ax2.set_ylabel("percent_completed_hs")
plt.show()

line = px.line(
    df_pct_poverty,
    x='Geographic Area',
    y='poverty_rate'
)
line.show()

df_pct_completed_hs.head()

df_pct_poverty.head(5)

df_pct_poverty = df_pct_poverty.sort_values(by="poverty_rate", ascending=True)

df_pct_completed_hs = df_pct_completed_hs.sort_values(by="percent_completed_hs", ascending=True)

df_share_race_city.sample(5)

df_share_race_city.share_white = df_share_race_city.share_white.str.replace("X", "").replace("()", "")
df_share_race_city.share_white = pd.to_numeric(df_share_race_city.share_white)

df_share_race_city.share_black = df_share_race_city.share_black.str.replace("X", "").replace("()", "")
df_share_race_city.share_black = pd.to_numeric(df_share_race_city.share_black)

df_share_race_city.share_native_american = df_share_race_city.share_native_american.str.replace("X", "").replace("()", "")
df_share_race_city.share_native_american = pd.to_numeric(df_share_race_city.share_native_american)

df_share_race_city.share_asian = df_share_race_city.share_asian.str.replace("X", "").replace("()", "")
df_share_race_city.share_asian = pd.to_numeric(df_share_race_city.share_asian)

df_share_race_city.share_hispanic = df_share_race_city.share_hispanic.str.replace("X", "").replace("()", "")
df_share_race_city.share_hispanic = pd.to_numeric(df_share_race_city.share_hispanic)

df_fatalities.sample(5)

df_share_race_city.plot(x='Geographic area',
                        y=['share_white', 'share_black'], kind='bar')

people_killed = df_fatalities.race.value_counts()
fig = px.pie(labels=people_killed.index,
             values=people_killed.values,
             title="Number of people killed by Race",
             names=people_killed.index,
             hole=0.6,   
)

fig.update_traces(textposition='inside', textfont_size=15, textinfo='percent')

fig.show()

df_fatalities.sample(3)

genders = df_fatalities.gender.value_counts()
genders

plt.figure(figsize=(8, 4))
plt.bar(genders.index, genders.values, color='maroon', width=0.4)

plt.title("Total Number of Deaths of Men and Women By Police")
plt.xlabel("Genders", fontsize=14)
plt.ylabel("Number of deaths", fontsize=14)
plt.show()

df_fatalities.sample(3)

new_df = df_fatalities.groupby("gender")

df_fatalities.info()

plt.boxplot(df_fatalities['age'], showfliers=False)
plt.ylabel("Number of fatalities by age", fontsize=10)
plt.show()

new_df = df_fatalities.age.value_counts()
new_df



plt.boxplot(new_df)

df_fatalities.sample(2)

armed = df_fatalities.armed.value_counts()
armed.describe()

unarmed_deaths = df_fatalities[df_fatalities['armed'] == 'unarmed'].count().armed

armed_deaths = df_fatalities[df_fatalities['armed'] != 'unarmed'].count().armed

print(f"Number of unarmed deaths: {unarmed_deaths}")
print(f"Number of armed deaths: {armed_deaths}")
total_deaths = armed_deaths + unarmed_deaths

print(f"Percentage of police killings where people were armed: {round((armed_deaths/total_deaths)*100)}%")

df_fatalities.sample(3)

guns = df_fatalities[df_fatalities['armed'] == 'gun'].count().armed

guns

print(f"The number of people who were armed with guns is: {guns}.")
print(f"The number of who were unarmed is: {unarmed_deaths}.")



armed = df_fatalities['armed'].value_counts()
armed_values = armed.values
armed_people = df_fatalities['armed'].drop(0).value_counts()
armed_people



# bids_train.groupby(['outcome','merchandise'])['bid_id'].count()
df = df_fatalities.groupby(['age'])['armed'].count()

df

plt.bar(
    df.index,
    df.values
)
plt.xlabel("Age", fontsize=10)
plt.ylabel("Armed", fontsize=10)
plt.show()

number_of_deaths_under_25 = df_fatalities.age[df_fatalities['age'] < 25].count()

print(f"The percentage of deaths under 25 years old is: {round(((number_of_deaths_under_25/total_deaths)*100), 2)}%.")

plt.hist(
    df_fatalities['age'], 
    color='purple',
    edgecolor='black'
)
plt.xlabel("Ages of the people killed by the police", fontsize=11)
plt.ylabel("Number of people killed by the police", fontsize=11)
plt.title("Distribution of ages of the people killed by police. ")
plt.show()

sns.kdeplot(
    data=df_fatalities,
    x='age'
)
plt.title("Distribution of ages of the people killed by police. ")
plt.show()

data = df_fatalities['race'].value_counts()
data

sns.kdeplot(
    data=data,
    x=data.values
)
plt.show()

df_fatalities.sample(3)

data

sns.barplot(
    data=data, 
    x=data.index, 
    y=data.values
)

plt.show()

df_fatalities.sample(2)

mental_illness = df_fatalities.signs_of_mental_illness[df_fatalities['signs_of_mental_illness'] == True].count()

no_mental_illness = df_fatalities['signs_of_mental_illness'][df_fatalities['signs_of_mental_illness'] == False].count()

no_mental_illness

total_mental_illness = mental_illness + no_mental_illness

percentaged_with_mental_illness = round(((mental_illness/total_mental_illness)*100), 2)

print(f"Percentage of people killed by the police who have been diagnosed with mental illnesses: {percentaged_with_mental_illness}%")

df_fatalities.race.value_counts()

city_deaths = df_fatalities['city'].value_counts().head(10)
city_deaths





plt.figure(figsize=(12, 8), dpi=75)
plt.bar(city_deaths.index, city_deaths.values)
plt.title("Top 10 USA Cities with the most police killings" , fontsize=20)
plt.ylabel("Number of Deaths", fontsize=17)
plt.xlabel("US Cities", fontsize=17)
plt.show()

states = city_deaths.index
states

all_black_deaths = []
all_white_deaths = []
all_hispanic_deaths = []
all_asian_deaths = []
all_native_american_deaths = []

for state in states:
    black_deaths = df_fatalities[df_fatalities['city'] == state][df_fatalities['race'] == 'B'].value_counts()
    white_deaths = df_fatalities[df_fatalities['city'] == state][df_fatalities['race'] == 'W'].value_counts()
    hispanic_deaths = df_fatalities[df_fatalities['city'] == state][df_fatalities['race'] == 'H'].value_counts()
    asian_deaths = df_fatalities[df_fatalities['city'] == state][df_fatalities['race'] == 'A'].value_counts()
    native_deaths = df_fatalities[df_fatalities['city'] == state][df_fatalities['race'] == 'N'].value_counts()
    all_black_deaths.append(pd.DataFrame(black_deaths))
    all_white_deaths.append(pd.DataFrame(white_deaths))
    all_hispanic_deaths.append(pd.DataFrame(hispanic_deaths))
    all_asian_deaths.append(pd.DataFrame(asian_deaths))
    all_native_american_deaths.append(native_deaths)

total = 0
print("Proportion of deaths for all races: ")
for i in range(10):
  total = city_deaths[i] - (len(all_black_deaths[i]) + len(all_white_deaths[i]) + len(all_asian_deaths[i])+len(all_hispanic_deaths[i]) + len(all_native_american_deaths[i]))
  print(f"{city_deaths.index[i]}:\nTotal Deaths: {city_deaths.values[i]}\nnumber of black deaths: {len(all_black_deaths[i])}\nnumber of white deaths: {len(all_white_deaths[i])}\nnumber of asian deaths: {len(all_asian_deaths[i])}\nnumber of hispanic deaths: {len(all_hispanic_deaths[i])}\nnumber of native american deaths: {len(all_native_american_deaths[i])}\nother: {total}\n")



